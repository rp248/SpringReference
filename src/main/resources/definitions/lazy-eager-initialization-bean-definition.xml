<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--Eagerly loaded by Spring Ioc container; By default, ApplicationContext implementations
    eagerly create and configure all singleton beans as part of the initialization process-->
    <bean id="xmlEmployee" class="com.spring.ioc.SpringIoc.xmlconfig.beans.XmlEmployee"/>

    <!--Lazy loaded; Spring Ioc container will create this bean, when client requests-->
    <bean id="xmlOrganisation" class="com.spring.ioc.SpringIoc.xmlconfig.beans.XmlOrganisation"
        lazy-init="true"/>

</beans>

<!--
When a lazy-initialized bean is a dependency of a singleton bean that is not lazy-initialized,
the ApplicationContext creates the lazy-initialized bean at startup, because it must satisfy
the singletonâ€™s dependencies. The lazy-initialized bean is injected into a singleton bean
elsewhere that is not lazy-initialized.

You can also control lazy-initialization at the container level by using the default-lazy-init
attribute on the <beans/> element; for example:
<beans default-lazy-init="true">
    no beans will be pre-instantiated
</beans>
-->