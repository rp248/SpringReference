<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config></context:annotation-config>

    <bean id="annotationOrganisation" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationOrganisation"/>
    <!--If we comment below line Spring IoC container will throw exception, because AnnotationOrganisation.java has
    dependency on AnnotationAddress and Spring IoC container unable to find this bean to auto-wire into
    AnnotationOrganisation bean-->
    <bean id="annotationAddress" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationAddress"/>

    <bean id="annotationGateway" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationGateway"/>
    <bean id="annotationPayment" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationPayment"/>

    <bean id="annotationGame" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationGame"/>
    <bean id="annotationPlayer1" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationPlayer"/>
    <bean id="annotationPlayer2" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationPlayer"/>
    <bean id="annotationPlayer3" class="com.spring.ioc.SpringIoc.annotationconfig.beans.AnnotationPlayer"/>

</beans>

<!--
Auto-wire annotated fields injected by Spring IoC container. If Spring IoC container unable to find
the specified auto-wired annotated bean type, it will throw exception.

Using auto-wire annotation we don't need to specify property dependencies in the bean definition.

@Autowire annotation can be used at field, constructor, method level.

By default @Autowire annotation uses property type to resolve and inject. If we specify @Qualifier
annotation @Autowire annotation will use the @Qualifier value to resolve the bean's name/identifier
or qualifier attribute value and inject.

Spring reference:
As of Spring Framework 4.3, the @Autowired constructor is no longer necessary
if the target bean only defines one constructor. If several constructors are available,
at least one must be annotated to teach the container which one it has to use.

Refer: AnnotationPayment.java

By default, the autowiring fails whenever zero candidate beans are available; the default behavior
is to treat annotated methods, constructors, and fields as indicating required dependencies.
This behavior can be changed as demonstrated below.

    @Autowired(required=false)
    public void setMovieFinder(MovieFinder movieFinder) {
        this.movieFinder = movieFinder;
    }

Note:
If you intend to express annotation-driven injection by name, do not primarily use
@Autowired, even if is technically capable of referring to a bean name through @Qualifier
values. Instead, use the JSR-250 @Resource annotation.

@Autowire resolves candidate beans by type, the specified String qualifier value will be
considered within those type-selected candidates only, e.g. matching an "account" qualifier
against beans marked with the same qualifier label.

Stackoverflow:
Both @Autowired (or @Inject) and @Resource work equally well. But there is a conceptual
difference or a difference in the meaning

    @Resource means get me a known resource by name. The name is extracted from the name
    of the annotated setter or field, or it is taken from the name-Parameter.

    @Inject or @Autowired try to wire in a suitable other component by type.

-->